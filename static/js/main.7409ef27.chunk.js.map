{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","hooks/index.js","context/projects-context.js","context/selected-project-context.js","components/ProjectOverlay.js","components/TaskDate.js","components/AddTask.js","components/layout/Header.js","components/IndividualProject.js","components/Projects.js","components/CollatedProjects.js","components/AddProject.js","components/layout/Sidebar.js","components/Checkbox.js","components/Tasks.js","components/layout/Content.js","index.js","App.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","process","REACT_APP_apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","fbTasks","firestore","collection","fbProjects","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","aria-label","tabIndex","onClick","onKeyDown","TaskDate","showTaskDate","setShowTaskDate","setTaskDate","moment","format","add","AddTask","showAddTaskMain","showQuickAddTask","setShowQuickAddTask","taskName","setTaskName","taskDate","showMain","setShowMain","addTask","collatedDate","archived","date","type","onChange","e","target","Header","darkMode","setDarkMode","IndividualProject","console","log","data-doc-id","role","Projects","activeNull","CollatedProjects","undefined","AddProject","shouldShow","show","setShow","projectName","setProjectName","placeholder","userId","Sidebar","showProjects","setShowProjects","Checkbox","archiveTask","doc","update","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","userTasks","where","onSnapshot","newTasks","filter","diff","useTasks","getTitle","getCollatedTitle","document","title","tasksToDisplay","fbTasksArchived","querySnapshot","forEach","ref","delete","deleteProject","Content","render","darkModeDefault","getElementById"],"mappings":"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","file":"static/js/main.7409ef27.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst firebaseConfig = firebase.initializeApp({\n  apiKey: `${process.env.REACT_APP_apiKey}`,\n  authDomain: \"todoist-tutorial-fb4d4.firebaseapp.com\",\n  databaseURL: \"https://todoist-tutorial-fb4d4.firebaseio.com\",\n  projectId: \"todoist-tutorial-fb4d4\",\n  storageBucket: \"todoist-tutorial-fb4d4.appspot.com\",\n  messagingSenderId: \"276056291270\",\n  appId: \"1:276056291270:web:5301db9f1d88141d14e4c7\"\n});\n\nexport { firebaseConfig as firebase };\n","export const collatedTasks = [\n  {key: 'INBOX', name: 'Inbox'},\n  {key: 'TODAY', name: 'Today'},\n  {key: 'NEXT_7', name: 'Next 7 Days'},\n  {key: 'ARCHIVED', name: 'Archived'}\n]","import { collatedTasks } from '../constants';\n\nexport const getTitle = (projects, projectId) =>\n  projects.find(project => project.docId === projectId);\n\nexport const getCollatedTitle = (projects, key) =>\n  projects.find(project => project.key === key);\n\nexport const collatedTasksExist = selectedProject =>\n  collatedTasks.find(task => task.key === selectedProject);\n\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  const lastRandChars = [];\n\n  return function() {\n    let now = new Date().getTime();\n\n    const timeStampChars = new Array(8);\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      now = Math.floor(now / 64);\n    }\n\n    let id = timeStampChars.join('');\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    return id;\n  };\n})();\n","import { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\n\nconst fbTasks = firebase.firestore().collection('tasks')\nconst fbProjects = firebase.firestore().collection('projects')\n\nexport const useTasks = selectedProject => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n\n  useEffect(() => {\n    let userTasks = fbTasks\n\n    // get the firebase tasks where project is the selected project\n    // if selected project is today, get the tasks where date is today\n    // if selected project is inbox, get the tasks where there is no date\n    // otherwise get all the tasks\n    userTasks = \n      selectedProject && !collatedTasksExist(selectedProject) ?\n      (userTasks = userTasks.where('projectId', '==', selectedProject))\n      : selectedProject === 'TODAY'\n      ? (userTasks = userTasks.where('date', '==', moment().format('DD/MM/YYYY')))\n      : selectedProject === 'INBOX'\n      ? (userTasks = userTasks.where('date', '==', ''))\n      : userTasks;\n\n      userTasks = userTasks.onSnapshot(snapshot => {\n        const newTasks = snapshot.docs.map(task => ({\n          id: task.id,\n          ...task.data()\n        }));\n\n        setTasks(\n          // if selected project is next 7, only show the tasks where the date is from today to the next 7 days\n          selectedProject === 'NEXT_7'\n            ? newTasks.filter(\n              task=> \n                moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 &&\n                task.archived !== true\n              )\n            : newTasks.filter(task => task.archived !== true)\n        );\n\n        setArchivedTasks(newTasks.filter(task => task.archived !== false));\n      });\n\n      return () => userTasks();\n  }, [selectedProject]);\n  return { tasks, archivedTasks };\n};\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    fbProjects\n      // .where('userId', '==', 'HcafYDT6NqkbwLPxqpsB')\n      .orderBy('projectId')\n      .get()\n      .then(snapshot => {\n        const allProjects = snapshot.docs.map(project => ({\n          ...project.data(),\n          docId: project.id,\n        }));\n        if (JSON.stringify(allProjects) !== (JSON.stringify(projects))) {\n          setProjects(allProjects);\n        }\n      });\n  }, [projects]);\n\n  return { projects, setProjects };\n};","import React, {createContext, useContext} from 'react';\nimport { useProjects } from '../hooks';\n\nexport const ProjectsContext = createContext();\nexport const ProjectsProvider = ({children}) => {\n  const { projects, setProjects } = useProjects();\n  return (\n    <ProjectsContext.Provider value={{projects, setProjects}}>\n      {children}\n    </ProjectsContext.Provider>\n  )\n};\n\nexport const useProjectsValue = () => useContext(ProjectsContext);","import React, {createContext, useContext, useState } from 'react';\n\nexport const SelectedProjectContext = createContext();\nexport const SelectedProjectProvider = ({children}) => {\n  // if project is not selected, default to inbox\n  const [ selectedProject, setSelectedProject ] = useState('INBOX');\n  return (\n    <SelectedProjectContext.Provider value={{selectedProject, setSelectedProject}}>\n      {children}\n    </SelectedProjectContext.Provider>\n  )\n};\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);","import React from 'react';\nimport { useProjectsValue } from '../context';\n\nexport const ProjectOverlay = ({\n  setProject,\n  // setSelectedProject, \n  showProjectOverlay, \n  setShowProjectOverlay\n}) => {\n  const { projects } = useProjectsValue();\n\n  return (\n    projects && showProjectOverlay && (\n      <div className=\"project-overlay\" data-testid=\"project-overlay\">\n        <ul className=\"project-overlay__list\">\n          {projects.map(project => (\n            <li\n              key={project.projectId}\n              data-testid=\"project-overlay-action\"\n              aria-label={`Selecting project ${project.name} to add task`}\n              tabIndex={0}\n              onClick={() => {\n                setProject(project.projectId);\n                setShowProjectOverlay(false);\n              }}\n              onKeyDown={() => {\n                setProject(project.projectId);\n                setShowProjectOverlay(false);\n              }}\n            >\n              {project.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  )\n}","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { FaSpaceShuttle, FaSun, FaRegPaperPlane } from 'react-icons/fa'\n\nexport const TaskDate = ({showTaskDate, setShowTaskDate, setTaskDate}) => {\n\n  return (\n    showTaskDate && (\n      <div className=\"task-date\" data-testid=\"task-date-overlay\">\n        <ul className=\"task-date__list\">\n          <li\n            aria-label=\"Selecting today as task date\"\n            tabIndex={0}\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().format('DD/MM/YYYY'));\n            }}\n            data-testid=\"task-date-today\"\n          >\n            <span>\n              <FaSun />\n            </span>\n            <span>\n            Today\n            </span>\n          </li>\n          <li\n            aria-label=\"Selecting tomorrow as task date\"\n            tabIndex={0}\n            onClick={()=> {\n              setShowTaskDate(false);\n              setTaskDate(moment().add(1, 'day').format('DD/MM/YYYY'))\n            }}\n            data-testid=\"task-date-tomorrow\"\n          >\n            <span>\n              <FaSpaceShuttle />\n            </span>\n            <span>\n              Tomorrow\n            </span>\n          </li>\n          <li\n            aria-label=\"Selecting next week as task date\"\n            tabIndex={0}\n            onClick={()=> {\n              setShowTaskDate(false);\n              setTaskDate(moment().add(7, 'day').format('DD/MM/YYYY'))\n            }}\n            data-testid=\"task-date-next-week\"\n          >\n            <span>\n              <FaRegPaperPlane /> \n            </span>\n            <span>Next Week</span>\n          </li>\n        </ul>\n      </div>\n    )\n  )\n}\n\n  ","import React, { useState } from 'react';\nimport { FaRegListAlt, FaRegCalendarAlt } from 'react-icons/fa';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { useSelectedProjectValue } from '../context';\nimport { ProjectOverlay } from './ProjectOverlay';\nimport { TaskDate } from './TaskDate';\n\nconst fbTasks = firebase.firestore().collection('tasks');\n\nexport const AddTask = ({\n  showAddTaskMain,\n  showQuickAddTask,\n  setShowQuickAddTask\n}) => {\n  const [taskName, setTaskName] = useState('');\n  const [taskDate, setTaskDate] = useState('');\n  const [showTaskDate, setShowTaskDate] = useState(false);\n  const [project, setProject] = useState('');\n  const [showMain, setShowMain] = useState(false);\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false);\n  \n\n  const { selectedProject, setSelectedProject } = useSelectedProjectValue();\n\n  const addTask = () => {\n    const projectId = project || selectedProject;\n    let collatedDate = '';\n\n    if (projectId === 'TODAY') {\n      collatedDate = moment().format('DD/MM/YYYY');\n    }\n    else if (projectId === 'NEXT_7') {\n      collatedDate = moment().add(7, 'days').format('DD/MM/YYYY')\n    }\n    \n    return (\n      taskName && \n      projectId && \n      fbTasks\n        .add({\n          archived: false,\n          projectId,\n          taskName,\n          date: collatedDate || taskDate,\n        })\n        .then(()=> {\n          // after adding task to firebase,\n          // clear task name, project overlay selection\n          // toggle display for regular add task module\n          // toggle display for project overlay and task date\n          // toggle display for quick add task module\n          setShowQuickAddTask && setShowQuickAddTask(false);\n          setShowMain(false);\n          setTaskName('');\n          setProject('');\n          setShowProjectOverlay(false);\n          setShowTaskDate(false);\n\n        })\n    );\n  };\n\n  return (\n    <div\n      className={showQuickAddTask ? 'add-task add-task__overlay' : 'add-task'}\n      data-testid=\"add-task-comp\"\n    >\n      {/* Regular Add Task Prompt */}\n      {showAddTaskMain && (\n        <div\n        aria-label=\"Add task\"\n        tabIndex={0}\n        className=\"add-task__shallow\"\n        data-testid=\"show-main-action\"\n        onClick={()=> setShowMain(!showMain)}\n        onKeyDown={()=> setShowMain(!showMain)}\n        >\n          <span className=\"add-task__plus\">+</span>\n          <span className=\"add-task__text\">Add Task</span>\n        </div>\n      )}\n\n      {(showMain || showQuickAddTask) && (\n        <div className=\"add-task__main\" data-testid=\"add-task-main\">\n          {/* Quick Add Task Module Header and X cancel button */}\n          {\n            showQuickAddTask && (\n            <div data-testid=\"quick-add-task\">\n              <h2 className=\"header\">Quick Add Task</h2>\n              <span\n                tabIndex={0}\n                className=\"add-task__cancel-x\"\n                data-testid=\"add-task-quick-cancel\"\n                aria-label=\"Cancel adding a task\"\n                onClick={() => {\n                  setShowQuickAddTask(false)\n                  setShowProjectOverlay(false);\n                  setShowTaskDate(false);\n                }}\n                onKeyDown={() => {\n                  setShowQuickAddTask(false)\n                  setShowProjectOverlay(false);\n                  setShowTaskDate(false);\n                }}\n              >\n                X\n              </span>\n            </div>\n          )}\n          <ProjectOverlay\n            setProject={setProject}\n            showProjectOverlay={showProjectOverlay}\n            setShowProjectOverlay={setShowProjectOverlay}\n          />\n          <TaskDate \n            setTaskDate={setTaskDate}\n            showTaskDate={showTaskDate}\n            setShowTaskDate={setShowTaskDate}\n          />\n          <input\n            aria-label=\"Enter your task\"\n            className=\"add-task__content\"\n            data-testid=\"add-task-content\"\n            type=\"text\"\n            value={taskName}\n            onChange={e => setTaskName(e.target.value)}\n            tabIndex={0}\n\n          />\n          <button\n            aria-label=\"Submit your task\"\n            type=\"button\"\n            className=\"add-task__submit\"\n            data-testid=\"add-task\"\n            tabIndex={0}\n            onClick={()=> {\n              addTask()\n            }}\n            onKeyDown={()=> {\n              addTask()\n            }}\n          >\n            Add Task\n          </button>\n          {/* Regular Add Task Module Cancel button */}\n          {!showQuickAddTask && (\n            <span\n              className=\"add-task__cancel\"\n              data-testid=\"add-task-main-cancel\"\n              tabIndex={0}\n              aria-label=\"Cancel adding task\"\n              onClick={()=> {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n                setShowTaskDate(false);\n              }}\n              onKeyDown={()=> {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n                setShowTaskDate(false);\n              }}\n            >\n              Cancel\n            </span>\n          )}\n          <span\n            className=\"add-task__project\"\n            data-testid=\"show-project-overlay\"\n            aria-label=\"Select project\"\n            tabIndex={0}\n            onClick={()=> {\n              setShowProjectOverlay(!showProjectOverlay);\n              setShowTaskDate(false);\n            }}\n            onKeyDown={()=> {\n              setShowProjectOverlay(!showProjectOverlay);\n              setShowTaskDate(false);\n            }}\n          >\n            <FaRegListAlt />\n          </span>\n          <span\n            className=\"add-task__date\"\n            data-testid=\"show-task-date-overlay\"\n            aria-label=\"Select task date\"\n            tabIndex={0}\n            onClick={() => {\n              setShowTaskDate(!showTaskDate);\n              setShowProjectOverlay(false);\n            }}\n            onKeyDown={() => {\n              setShowTaskDate(!showTaskDate);\n              setShowProjectOverlay(false);\n            }}\n          >\n            <FaRegCalendarAlt />\n          </span>\n        </div>\n        \n      )}\n\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { FaPizzaSlice, FaCat } from 'react-icons/fa';\nimport { AddTask } from '../AddTask';\n\nexport const Header = ({darkMode, setDarkMode}) => {\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n\n return (\n  <header className=\"header\" data-testid=\"header\">\n    <nav>\n      <div className=\"logo\">\n        <FaCat />\n        {/* <img src={process.env.PUBLIC_URL + \"images/gudetamaicon.png\"} alt=\"Todoist\"/> */}\n      </div>\n      <div className=\"settings\">\n        <ul>\n          <li \n            data-testid=\"quick-add-task-action\" \n            className=\"settings__add\"\n          >\n            <div\n              aria-label=\"Quick add task\"\n              tabIndex={0}\n              onClick={()=> {\n                setShowQuickAddTask(true); \n              }}\n              onKeyDown={()=> {\n                setShowQuickAddTask(true); \n              }}\n            >\n              +\n            </div>\n          </li>\n          <li \n            data-testid=\"dark-mode-action\" \n            className=\"settings__darkmode\"\n          >\n            <div\n              aria-label=\"Darkmode on/off\"\n              tabIndex={0}\n              onClick={()=> {\n                setDarkMode(!darkMode)}}\n              onKeyDown={()=> {\n                setDarkMode(!darkMode)}}\n            >\n              <FaPizzaSlice/>\n\n            </div>\n          </li>\n        </ul>\n      </div>\n    </nav>\n    <AddTask\n      showQuickAddTask={showQuickAddTask}\n      setShowQuickAddTask={setShowQuickAddTask}\n    />\n   </header>\n ) \n}\n\n","import React from 'react';\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\n\nexport const IndividualProject = ({project}) => {\n  const { selectedProject, setSelectedProject } = useSelectedProjectValue();\n  console.log('selectedproject docid: ' + selectedProject)\n\n  return (\n    <li\n      key={project.projectId}\n      data-doc-id={project.docId}\n      data-testid=\"project-action\"\n      className={\n        selectedProject === project.docId\n        ? 'active sidebar__project'\n        : 'sidebar__project'\n      }\n      role=\"button\"\n      aria-label={`Selecting project ${project.name}`}\n      tabIndex={2}\n      onClick={() => {\n        setSelectedProject(project.docId);\n\n      }}\n      onKeyDown={() => {\n        setSelectedProject(project.docId);\n      }}\n    >\n      {/* <div\n        role=\"button\"\n        aria-label={`Selecting project ${project.name}`}\n        tabIndex={2}\n        onClick={() => {\n          setSelectedProject(project.docId);\n\n        }}\n        onKeyDown={() => {\n          setSelectedProject(project.projectId);\n        }}\n      > */}\n          \n        <span className=\"sidebar__dot\">•</span>\n        <span className=\"sidebar__project-name\">{project.name}</span>\n      {/* </div> */}\n    </li>\n  )\n}","import React, { useState} from 'react';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\n\nimport { IndividualProject } from './IndividualProject';\n\nexport const Projects = ({ activeNull = true }) => {\n  // const [ active, setActive ] = useState();\n  // const { setSelectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n  \n  return (\n    projects &&\n    projects.map(project => (\n      // <li\n      //     key={project.projectId}\n      //     data-doc-id={project.docId}\n      //     data-testid=\"project-action\"\n      //     className={\n      //       active === project.projectId\n      //       ? 'active sidebar__project'\n      //       : 'sidebar__project'\n      //     }\n      //     onClick={() => {\n      //       setActive(project.projectId);\n      //       setSelectedProject(project.projectId);\n      //     }}\n      //   >\n          <IndividualProject project={project} />\n        // </li>\n    ))\n  )\n}","import React, { useState } from 'react'; \nimport { collatedTasks } from '../constants';\nimport { useSelectedProjectValue } from '../context';\nimport { \n  FaInbox, \n  FaRegCalendarAlt, \n  FaRegCalendar,\n  FaArchive\n } from 'react-icons/fa';\n\nexport const CollatedProjects = (CollatedProjects) => {\n  const [ active, setActive ] = useState('INBOX');\n  const { selectedProject, setSelectedProject } = useSelectedProjectValue();\n\n  return (\n    <ul>\n      {collatedTasks.map(task => {\n        return (\n        <li\n        aria-label={`Show ${task.key} tasks`} \n        key={task.key}\n        data-testid={task.key}\n        className={selectedProject === task.key ? 'active' : undefined}\n        onClick={() => {\n          // setActive(task.key);\n          setSelectedProject(task.key);\n        }}\n        onKeyDown={() => {\n          // setActive(task.key);\n          setSelectedProject(task.key);\n        }}\n        tabIndex={1}\n        >\n          <span>\n            {task.key === 'INBOX' && <FaInbox />}\n            {task.key === 'TODAY' && <FaRegCalendar />}\n            {task.key === 'NEXT_7' && <FaRegCalendarAlt />}\n            {task.key === 'ARCHIVED' && <FaArchive />}\n          </span>\n          <span>\n            {task.name}\n          </span>\n        </li>\n        )\n      })}\n  </ul>\n  )\n}","import React, { useState } from 'react';\nimport { firebase } from '../firebase';\nimport { generatePushId } from '../helpers';\nimport { useProjectsValue } from '../context';\n\nexport const AddProject = ({ shouldShow = false }) => {\n  const [show, setShow] = useState(shouldShow);\n  const [projectName, setProjectName] = useState('');\n\n  const projectId = generatePushId();\n  const { projects, setProjects } = useProjectsValue();\n\n  const fbProjects = firebase.firestore().collection('projects')\n\n  const addProject = () =>\n    projectName &&\n    fbProjects.add({\n      projectId,\n      name: projectName,\n      // hardcoded\n      userId: 'HcafYDT6NqkbwLPxqpsB'\n    })\n    .then(() => {\n      setProjects([...projects]);\n      setProjectName('');\n      setShow(false);\n    });\n\n    return (\n      <div className=\"add-project\" data-testid=\"add-project\">\n        {\n          show && (\n            <div className=\"add-project__input\">\n              <input\n                value={projectName}\n                onChange={e => setProjectName(e.target.value)}\n                className=\"add-project__name\"\n                data-testid=\"add-project-name\"\n                type=\"text\"\n                placeholder=\"Name your project\"\n              />\n              <button\n                className=\"add-project__submit\"\n                type=\"button\"\n                onClick={() => addProject()}\n                data-testid=\"add-project-submit\"\n              >\n                Add Project\n              </button>\n              <span\n                data-testid=\"hide-project-overlay\"\n                className=\"add-project__cancel\"\n                onClick={() => setShow(false)}\n              >\n                Cancel\n              </span>\n            </div>\n          )\n        }\n        <span className=\"add-project__plus\">+</span>\n        <span\n          aria-label=\"Add project\"\n          data-testid=\"add-project-action\"\n          className=\"add-project__text\"\n          tabIndex={0}\n          onClick={() => setShow(true)}\n          onKeyDown={() => setShow(true)}\n        >\n          Add Project\n        </span>\n      </div>\n    )\n};","import React, { useState } from 'react';\nimport { FaChevronDown } from 'react-icons/fa';\nimport { useSelectedProjectValue } from '../../context/index';\nimport { Projects } from '../Projects';\nimport { CollatedProjects } from '../CollatedProjects';\nimport { AddProject } from '../AddProject';\n\nexport const Sidebar = () => {\n  const [ showProjects, setShowProjects ] = useState(true)\n\n  return (\n    <div className=\"sidebar\" data-testid=\"sidebar\">\n      <div className=\"sidebar__generic\">\n        <CollatedProjects />\n      </div>\n      <div \n        aria-label=\"Show/hide projects\"\n        className=\"sidebar__middle\"\n        onClick={() => setShowProjects(!showProjects)}\n        onKeyDown={() => setShowProjects(!showProjects)}\n      >\n        <span>\n          <FaChevronDown\n            className={showProjects ? undefined : 'hidden-projects'}\n          />\n        </span>\n        <h2>Projects</h2>\n      </div>\n      <ul className=\"sidebar__projects\">\n        {showProjects && <Projects />}\n      </ul>\n      {showProjects && <AddProject />}\n    </div>\n  )\n}","import React from 'react';\nimport {firebase} from '../firebase';\n\nexport const Checkbox = ({id, taskName, archived}) => {\n  const archiveTask = () => {\n    firebase\n      .firestore()\n      .collection('tasks')\n      .doc(id)\n      .update({\n        archived: !archived\n      });\n  };\n\n  return (\n    <div \n      role=\"button\"\n      className=\"checkbox-holder\"\n      data-testid=\"checkbox-action\"\n      aria-label={`Mark task ${taskName} as done`}\n      tabIndex={0} \n      onKeyDown={()=> archiveTask()}\n      onClick={()=> archiveTask()}\n    >\n      <span\n         className={archived ? \"checkbox-checked\" : \"checkbox-unchecked\"}\n      />  \n    </div>\n  )\n}","import React, { useEffect } from 'react';\nimport { Checkbox } from './Checkbox';\nimport { AddTask } from './AddTask';\nimport { useTasks } from '../hooks';\nimport { collatedTasks } from '../constants';\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\nimport { FaTrashRestore, FaTrashAlt } from 'react-icons/fa';\nimport {firebase} from '../firebase';\n\nexport const Tasks = () => {\n  const { projects, setProjects } = useProjectsValue();\n  const { selectedProject, setSelectedProject } = useSelectedProjectValue();\n  const { tasks, archivedTasks } = useTasks(selectedProject);\n  \n  let projectName = '';\n\n  // if the project is not inbox, today, or next 7 days, search through projects list\n  if (projects && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n  // else search through collated tasks list\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`\n  })\n\n  let tasksToDisplay = []\n  selectedProject === 'ARCHIVED' ? tasksToDisplay = archivedTasks : tasksToDisplay = tasks;\n\n  const fbTasks = firebase.firestore().collection('tasks')\n  const fbTasksArchived = fbTasks.where('archived', '==', true)\n\n  const restoreAllArchivedTasks = () => {\n    fbTasksArchived.get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        doc.ref.update({\n          archived: false\n        });\n      })\n    })\n  };\n\n  const deleteAllArchivedTasks = () => {\n    fbTasksArchived.get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        doc.ref.delete();\n      })\n    })\n  };\n\n  const deleteProject = (selectedProject) => {\n    firebase.firestore().collection('projects').doc(selectedProject).delete().then(()=> {\n      setProjects([...projects]);\n      setSelectedProject('INBOX');\n    })\n  }\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <div className=\"heading\">\n        <h2 data-testid=\"project-name\">\n        {projectName}\n        </h2>\n        {selectedProject === 'ARCHIVED' &&\n          (\n            <div className=\"archived-icons\">\n              <ul>\n                <li\n                  onClick={() => restoreAllArchivedTasks()}\n                  >\n                  <FaTrashRestore /> \n                </li>\n                <li\n                  onClick={() => deleteAllArchivedTasks()}\n                  >\n                  <FaTrashAlt />\n                </li>\n            </ul>\n          </div>\n          )\n        }\n        {!collatedTasksExist(selectedProject) && \n          (\n            <div className=\"archived-icons\">\n                <ul>\n                  <li\n                    onClick={() => deleteProject(selectedProject)}\n                    >\n                    <FaTrashAlt />\n                  </li>\n              </ul>\n            </div>\n          )\n        }\n      </div>\n      <ul className=\"tasks__list\">\n        {        \n          tasksToDisplay.map(task=> (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} taskName={task.taskName} archived={selectedProject==='ARCHIVED'}/>\n            <span>{task.taskName}</span>\n          </li>\n        ))}\n      </ul>\n      <AddTask \n        showAddTaskMain={true}\n      />\n    </div>\n  )\n}","import React from 'react';\nimport { Sidebar } from './Sidebar';\nimport { Tasks } from '../Tasks';\n\nexport const Content = () => (\n  <section className=\"content\">\n    <Sidebar />\n    <Tasks />\n  </section>\n)","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './App.scss';\n\nrender(<App />, document.getElementById('root'));","import React, {useState} from 'react';\nimport { Header } from './components/layout/Header'\nimport { Content } from './components/layout/Content'\nimport { ProjectsProvider, SelectedProjectProvider } from './context';\n\nexport const App = ({darkModeDefault = false}) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\n\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <div className=\"App\">\n          <main\n            data-testid=\"application\"\n            className={darkMode ? 'darkMode' : undefined}\n          >\n          <Header darkMode={darkMode} setDarkMode={setDarkMode}/>\n          <Content />\n          </main>\n        </div>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  );\n};"],"sourceRoot":""}